pipeline {
    agent any

    environment {
        token = 'TDX7PFXhq2wM49FKMs0BBw65EMR9cUW5Sa8pL35NtkH'
        jobName = "${JOB_NAME} ${BRANCH_NAME != null ? BRANCH_NAME : ''}"
        buildNo = "${BUILD_NUMBER}"
        Job_url = "${BUILD_URL}"
        url = 'https://notify-api.line.me/api/notify'
        url_monitor = '192.168.49.66:7901/'
        message_Pre = "${jobName} Build #${buildNo} กำลังทดสอบ กดlink เพื่อดูจอแสดงผล ${url_monitor}"
        allureReportPath = 'reports'
    }

    stages {
        stage('Initialize') {
            steps {
                script {
                    allureReportPaths = []  // List to store Allure report paths
                }
            }
        }
        stage('Line Notify (pre build)') {
            steps {
                // Send Line Notify message before the build starts
                script {
                    bat "curl %url% -H \"Authorization: Bearer %token%\" -F \"message=${message_Pre}\""
                }
            }
        }
      stage('Run Tests 1') {
            steps {
                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                    // Run pytest command and generate test result data
                    sh 'pip install -r requirements.txt'
                }
            }
        }
        
        stage('Run Tests 2') {
            steps {
                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                    // Run pytest command and generate test result data
                    sh 'pytest test_sampl.py --alluredir=Reports'
                }
                script {
                    // Append Allure report path to the list
                    allureReportPaths.add("${allureReportPath}/")
                }
            }
        }
        
        stage('Run Tests 3') {
            steps {
                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                    // Run pytest command and generate test result data
                    sh 'pytest test_sampl.py --alluredir=Reports'
                }
                script {
                    // Append Allure report path to the list
                    allureReportPaths.add("${allureReportPath}/")
                }
            }
        }
    }

    post {
        always {
            // Publish accumulated Allure reports
            allure([
                includeProperties: false,
                jdk: '',
                results: allureReportPaths.collect { path -> [path: path] }
            ])
        }
    }
}
